### **README for API Gateway**

---

## **API Gateway Service**

### Overview

The **API Gateway Service** acts as a reverse proxy, routing client requests to the appropriate microservices. It is also responsible for handling **authentication** and **license validation** through custom middleware. Additionally, it integrates a **circuit breaker** to handle failure scenarios and global filters for logging requests.

### Key Features
- **Routing**: Manages routing of requests to different microservices (Auth, Debt, License, etc.).
- **JWT Authentication**: Validates JWT tokens before forwarding requests.
- **License Validation**: Ensures that requests include a valid license key before they are processed.
- **Circuit Breaker**: Provides fault tolerance by preventing requests to failing services.
- **Global Filters**: Implements filters for logging, request/response modification, and additional middleware.

---

### **Tree Structure**

```bash
api-gateway/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── gateway/
│   │   │           ├── config/
│   │   │           │   └── GatewayConfig.java
│   │   │           ├── filters/
│   │   │           │   ├── JwtAndLicenseGatewayFilter.java
│   │   │           │   └── GlobalLoggingFilter.java
│   │   │           ├── controllers/
│   │   │           │   └── GatewayController.java
│   │   │           └── utils/
│   │   │               └── JwtTokenProvider.java
│   ├── resources/
│   │   ├── application.properties
│   └── test/
└── pom.xml
```

---

### **Components Explanation**

1. **GatewayConfig.java**
   - This is the configuration class where the routes to the microservices are defined.
   - You can set up any custom filters, timeouts, or route-specific configurations here.

2. **JwtAndLicenseGatewayFilter.java**
   - A custom filter that validates both the **JWT token** and the **license key**.
   - It uses `JwtTokenProvider` to validate tokens, and makes a call to the **License Service** to validate license keys.
   - This filter is applied globally to all incoming requests and prevents unauthorized access.

3. **GlobalLoggingFilter.java**
   - This is a filter that logs incoming requests and outgoing responses.
   - It captures important information like headers, method, and status codes, helping in request tracing and debugging.

4. **GatewayController.java**
   - Provides basic endpoints for monitoring or testing purposes within the gateway.
   - Acts as a fallback mechanism in case the routing fails.

5. **JwtTokenProvider.java**
   - This utility class is responsible for handling JWT token-related operations such as parsing, validating, and extracting information from tokens.
   - It is used in the `JwtAndLicenseGatewayFilter` for token validation.

6. **application.properties**
   - Contains configuration for the API Gateway, including routing details, service URLs, and any application-level properties.

---

### **How It Works**

1. **Routing**: 
   - The API Gateway serves as the main entry point for all client requests. It routes requests to specific microservices based on the URL path.
   
2. **Authentication**:
   - The `JwtAndLicenseGatewayFilter` checks the requests `Authorization` header for a JWT token. The token is validated using the `JwtTokenProvider` (which communicates with the **auth-service** for token-related operations).
   
3. **License Validation**:
   - The filter also checks for a `License-Key` in the request headers. This license key is validated against the **License Service** using WebClient.
   
4. **Circuit Breaker**:
   - The **circuit breaker** intercepts calls to microservices and prevents calls if the service is down, helping to manage failures gracefully.
   
5. **Logging**:
   - All incoming and outgoing requests are logged using the `GlobalLoggingFilter`, allowing easy tracking and troubleshooting of issues.

---

### **Endpoints**

- **/auth/**: Routes to the **Auth Service** for handling user authentication, token generation, and management.
- **/debt/**: Routes to the **Debt Service** for managing user debts.
- **/license/**: Routes to the **License Service** for license validation.

---

### **How to Run**

1. Ensure **Maven** and **Java 21** are installed on your system.
2. Run the following Maven command to build the project:
   ```bash
   mvn clean install
   ```
3. Start the application by running:
   ```bash
   mvn spring-boot:run
   ```

4. The API Gateway will be available on `localhost:8080`.

---

### **Future Enhancements**

- **Rate Limiting**: Implement rate limiting to prevent abuse of the API.
- **Better Caching**: Cache JWT tokens and licenses in memory to avoid unnecessary database calls on every request.
- **Detailed Circuit Breaker Settings**: Fine-tune the circuit breaker settings for more resilience.

---

This README outlines the primary purpose of the **API Gateway**, explaining the different components and their roles in the application.

Let me know if you want to modify anything!